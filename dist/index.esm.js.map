{"version":3,"file":"index.esm.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  userDashboardList?: any;\r\n  userDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n\r\n  private currentLogLevel: LOG_LEVELS;\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const  { documentDetails, auditDocumentDetails } = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n  \r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n    const userDashboardList = await this.getUserDashboardList(dt_gen2_environment, auth_header);\r\n    const userDashboardDetails = await this.getDashboardsData(dt_gen2_environment, userDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      userDashboardList: userDashboardList,\r\n      userDashboardDetails: userDashboardDetails\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n  async getUserDashboardList(\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getUserDashboardList Error: ${error}`);\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\") && !entitiesList) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    }\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n\r\n    // Normalize the document_name_to_query by removing spaces and converting to lowercase\r\n    const normalizedDocumentName = document_name_to_query.replace(/\\s+/g, '').toLowerCase();\r\n\r\n    const documentFilter = `name contains '${normalizedDocumentName}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<{ documentDetails: any[], auditDocumentDetails: any[] }> {\r\n      if (documentsList === null) {\r\n        return { documentDetails: [], auditDocumentDetails: [] };\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      let auditDocumentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n\r\n            // Fetch direct-shares information\r\n            const documentSharesFilter = `documentId=='${documentId}'`;\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n\r\n            // Fetch environment-shares information\r\n            const environmentSharesResponse = await fetch(`${environment}/platform/document/v1/environment-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (environmentSharesResponse.ok) {\r\n              const environmentSharesResult = await environmentSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"environmentSharesResult:\\n\" + JSON.stringify(environmentSharesResult, null, 2));\r\n              result[\"environment-shares\"] = environmentSharesResult[\"environment-shares\"];\r\n            } else {\r\n              const errorDetails = await environmentSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Environment Shares Error: ${environmentSharesResponse.status} ${errorDetails}`);\r\n            }\r\n\r\n            if (result.sections) {\r\n              result.sections.forEach((section: any) => {\r\n                if (section.state && section.state.result) {\r\n                  delete section.state.result;\r\n                }\r\n                if (section.state.davis && section.state.davis.resultState) {\r\n                  delete section.state.davis.resultState;\r\n                }\r\n              });\r\n            }\r\n\r\n          // Create a copy of the result for audit info and remove the 'result' and 'resultState' attributes\r\n          const auditResult = JSON.parse(JSON.stringify(result));\r\n          if (auditResult.sections) {\r\n            auditResult.sections.forEach((section: any) => {\r\n              if (section.state && section.state.result) {\r\n                delete section.state.result;\r\n              }\r\n              if (section.state.davis && section.state.davis.resultState) {\r\n                delete section.state.davis.resultState;\r\n              }\r\n            });\r\n          }\r\n            auditDocumentDetails.push(auditResult);\r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n        }\r\n      }\r\n    \r\n      return { documentDetails, auditDocumentDetails };\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      userDashboardList,\r\n      userDashboardDetails\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n      if (userDashboardList != null) {\r\n        audit_info[\"userDashboardList\"] = userDashboardList;\r\n      }\r\n\r\n      if (userDashboardDetails != null) {\r\n        audit_info[\"userDashboardDetails\"] = userDashboardDetails;\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      // Normalize the input by removing spaces and converting to lowercase\r\n      const normalizedInput = inputValue.replace(/\\s+/g, '').toLowerCase();\r\n\r\n      // Normalize the keywords by removing spaces and converting to lowercase\r\n      const normalizedKeywords = keywords.map(keyword => keyword.replace(/\\s+/g, '').toLowerCase());\r\n    \r\n      return normalizedKeywords.every(keyword => normalizedInput.includes(keyword));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_iteratorSymbol","Symbol","iterator","pact","state","value","s","_Pact","o","_settle","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","array","body","check","reject","_cycle","i","length","target","step","done","_fixup","TypeError","push","_forTo","values","DTFunctions","currentLogLevel","ERROR","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","_ref2","generateAuditInfo","documentList","documentDetails","auditInfo","_ref3","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref4","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getUserDashboardList","userDashboardList","getDashboardsData","userDashboardDetails","_ref5","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","_catch","fetch","response","_temp2","_result2","_exit","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","_forOf","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_this8","config_list","parameters","_temp13","includes","_temp11","_temp10","callConfigList","_temp14","_this9","configlist","_temp16","_temp15","_response$json2","_this10","configsData","_temp20","item","keys","key","Array","isArray","subItem","_temp19","request_details","_temp18","response_details","_temp17","configdetails","_forIn","schemaId","scope","_this11","settings_list","generated_scope","_step","_iterator","_createForOfIteratorHelperLoose","_temp22","_temp21","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp24","_temp23","_response$json4","document_type","document_name_to_query","_this13","documentFilter","replace","toLowerCase","encodeURIComponent","documents","_temp26","_temp25","_response$json5","_temp34","auditDocumentDetails","_this14","_temp33","document","documentId","String","_temp32","_temp31","documentSharesFilter","directSharesResponse","_temp30","environmentSharesResponse","_temp28","sections","forEach","section","davis","resultState","auditResult","parse","_temp27","environmentSharesResult","_temp29","directSharesResult","_ref6","audit_info","checkKeywordsExistence","inputValue","keywords","normalizedInput","map","keyword","every","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"AAEM,IAAAA,0BACJ,SAAAA,YAAgBA,EAAAC,UAEhBC,eAAA,SAAeC,EAAYC,GAKzB,MAJU,CACRD,GAAIA,EACJE,YAAaD,EAGjB,EAACJ,CAAA,m4BC+PIM,EAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,wBApKDE,EAAAC,EAAAC,OACHF,EAAAG,EAAA,IAGID,aAAmBE,EACtB,OAaiCD,EAUjC,cADyBE,EAAAC,EAAAC,KAAA,KAAAP,EAAAC,IARnB,EAANA,MAEwBC,EAAAC,KAGAD,EAAAM,EASxB,GAAAN,UAGA,cADwBO,KAAAH,EAAAC,KAAA,KAAAP,EAAAC,GAAAK,EAAAC,KAAA,KAAAP,EAAA,QAIlBC,EACND,EAAAQ,EAAAN,MAGEQ,EAAsBV,EAAAK,EACxBK,GACEA,EAAAV,EAEA,CACA,CAtJN,IAAYW,EAAUP,eAAA,WACpB,SAAAA,IAAA,CAiGI,OAhGJA,EAAAZ,UAAAiB,KAAA,SAAAG,EAAAC,GACA,IAAAC,EAAA,IAAAV,EACAH,EAAAc,KAAAZ,EACA,GAAAF,EAAA,CALU,IAAAe,EAAU,EAAVf,EAMXW,EAAAC,EA8CD,GAAiBG,EAAA,CAEP,IAEIV,EAAAQ,EAAA,EAAAE,EAAAD,KAAwCP,GAClD,CAAA,MAAKS,GACNX,EAAAQ,EAAA,EAAAG,EAED,CACE,OAAAH,EAED,OAA2DC,KAgC1D,cAlBI,SAAAG,GACJ,QACIhB,EAAgBgB,EAAAV,EACZ,EAANU,EAAAf,IACDW,EAAA,EAAAF,EAAAA,EAAAV,GAAAA,GACWW,IAESC,EAAA,EAAAD,EAAAX,MAGEY,EAAA,EAAAZ,SAGDe,GACtBX,EAAAQ,IAAeG,GAGf,EACAH,GAGEV,CACA,CAnGgB,GAwJhB,SAAAe,EAA0BC,GAC1B,OAAAA,aAAAhB,GAAoC,EAAAgB,EAAAjB,CACpC,YA2DDkB,EAAAC,EAAAC,OAAQvB,EAAAwB,KAAA,SACP,SAAAC,EAAKX,cAERY,EAAAL,EAAAM,UAAAJ,IAAAA,MAGC,IADFT,EAAqDQ,EAAAI,KACfZ,EAAAL,KAAA,KACNU,EAAAL,GAI5B,cADOL,OAAQe,IAAAA,EAA0BlB,EAAQC,KAAE,KAAAP,EAAA,IAAAI,EAAA,KAFnDU,EAAaA,EAAAN,CAMf,GAGEF,EAAAN,EAAa,EAAAc,KAENA,EAET,MAACG,KAE6CjB,IAAAA,EAAA,IAAAI,GAAA,EAAAa,IAG5CQ,GACAzB,aA+BQ4B,EAAUN,EAAWC,GACzB,GAAa,mBAAbK,EAAA/B,GAAa,CAEd,IADiBgC,EAAA7B,EAAAwB,EACjBC,EAAA,SAAEX,GAEH,IACE,QAAAe,EAAA9B,UAAiB+B,MAAYP,GAASA,MAEpC,IADFT,EAAAQ,EAAAO,EAAY3B,SACVY,EAAML,KAAO,CACb,IAAAU,EAAAL,GAGA,YADAA,EAAAL,KAAAgB,MAAkBD,EAASlB,EAAQC,KAAK,KAAGP,EAAA,IAAAI,EAAA,OAD7CU,EAACN,MAMFR,EAAA,EAAAc,GAGHd,EAAAc,EAImD,MAAAG,GACvDX,EAAMN,IAAAA,EAAA,IAAAI,GACe,EACHa,KAxBVlB,EAAA6B,EAAO/B,cA6BP,OAAA,CAEN,IAAAkC,EAAK,SAAA7B,GACH,MAQI4B,QAC6C,QAGjD,CAAA,MAAAb,oBAIDjB,EAAAS,YAAQT,EAAAS,OAAQ,SAAAQ,WACPA,QAOZ,CAKE,OAAAjB,CACE,iBAGE4B,aACEI,UAAA,oCASA,GACLN,EAAA,EAAAA,EAAAE,EAAAD,OAAAD,MAAQO,KAAAL,aAETM,EAACC,EAAA,SAAAT,GAAA,OAAAJ,EAAAa,EAAAT,GAAA,EAAAH,EAED,EAjWJ,SAAYZ,GACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,OACD,CAND,CAAYA,IAAAA,EAMX,CAAA,IA8CK,IAAAyB,0BAIJ,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAA8B1B,EAAW2B,YAF7CD,qBAAe,EAGrBtB,KAAKsB,gBAAkBA,CACzB,CAAC,IAAAE,EAAAH,EAAA5C,UAisBE,OAjsBF+C,EAEDC,YAAA,SAAYC,GACV1B,KAAKsB,gBAAkBI,CACzB,EAACF,EAEMG,gCAAsBC,OAC3BC,EAAeD,EAAfC,gBACAC,EAAmBF,EAAnBE,oBACAC,EAAcH,EAAdG,eACAC,EAAkBJ,EAAlBI,mBACAC,EAAuBL,EAAvBK,wBACAC,EAAYN,EAAZM,aACAC,EAAYP,EAAZO,aACAC,EAAYR,EAAZQ,aACAC,EAAQT,EAARS,SACAC,EAAQV,EAARU,aACenC,IAAAA,EAGeH,KAD1BuC,EAAe,KAAK,OAAAC,QAAAC,QACMtC,EAAKuC,oBAAoBb,EAAiBC,EAAqBC,EAAgBC,IAAmBtC,KAA1HiD,SAAAA,GACN,IAAKA,EACH,MAAM,IAAIC,MAAM,iCACjB,OAAAJ,QAAAC,QACoBtC,EAAK0C,+BAA+BF,IAAgBjD,cAAAoD,GAAC,OAA1EP,EAAYO,EAA8DN,QAAAC,QAG9CtC,EAAK4C,iBAAiBd,EAAyBC,EAAcC,EAAcI,IAAa7C,KAAA,SAA9GsD,GAAaR,OAAAA,QAAAC,QAGsCtC,EAAK8C,mBAAmBhB,EAAyBe,EAAeT,IAAa7C,KAAA,SAAAwD,UAAxFV,QAAAC,QAGtBtC,EAAKgD,kBAAkB,CAAEC,aAAcJ,EAAeK,gBAHtDH,EAAfG,mBAGwG3D,KAAA,SAA3G4D,GAASd,OAAAA,QAAAC,QAGsDH,EAASgB,EAAWf,IAAa7C,KAAA6D,SAAAA,OAAvFC,EAAUD,EAAjBE,MAGR,OAFAH,EAAUI,eADgDH,EAA/BI,gBAGpB,CACLvB,aAAcA,EACdC,SAAUA,EACVmB,WAAYA,EACZF,UAAWA,EACX,EAAA,EAAA,EAAA,EAAA,EAAA,EACJ,CAAC,MAAApD,GAAAsC,OAAAA,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGKoC,mBAAkB,SAAAC,GAAA,IACtBC,EAAmBD,EAAnBC,oBACAnB,EAAekB,EAAflB,gBACAP,EAAYyB,EAAZzB,aACAC,EAAQwB,EAARxB,SACA0B,EAAWF,EAAXE,YACAC,EAAoBH,EAApBG,qBACAC,EAAeJ,EAAfI,gBACAC,EAAoBL,EAApBK,qBACAC,EAA2BN,EAA3BM,4BACAC,EAAkBP,EAAlBO,mBACAC,EAAcR,EAAdQ,eACA/B,EAAQuB,EAARvB,SAAQ,QACGgC,EAEetE,KAAIwC,OAAAA,QAAAC,QAAJ6B,EAAKC,2BAA2B5B,IAAgBjD,cAApE8E,GAAW,OAAAhC,QAAAC,QAGU6B,EAAKG,YAAYX,EAAqBC,EAAaC,EAAsBQ,IAAY9E,cAA1GgF,GAAY,OAAAlC,QAAAC,QAGS6B,EAAKK,gBAAgBb,EAAqBY,EAAcF,IAAY9E,cAAzFkF,GAAY,OAAApC,QAAAC,QAGO6B,EAAKO,eAAef,EAAqBG,EAAiBC,EAAsBC,EAA6BO,EAAcF,IAAY9E,cAA1JoF,GAAU,OAAAtC,QAAAC,QAEY6B,EAAKS,eAAejB,EAAqBG,EAAiBa,EAAYN,IAAY9E,KAAA,SAAxGsF,GAAaxC,OAAAA,QAAAC,QAGQ6B,EAAKW,gBAAgBnB,EAAqBY,EAAcF,EAAaJ,EAAoBC,IAAe3E,KAA7HwF,SAAAA,GAAY1C,OAAAA,QAAAC,QAGS6B,EAAKa,gBAAgBrB,EAAqBY,EAAcF,IAAY9E,KAAzF0F,SAAAA,UAAY5C,QAAAC,QAGc6B,EAAKe,qBAAqBvB,EAAqBU,IAAY9E,KAAA,SAArF4F,GAAiB9C,OAAAA,QAAAC,QACY6B,EAAKiB,kBAAkBzB,EAAqBwB,EAAmBd,IAAY9E,KAAxG8F,SAAAA,GAAoBhD,OAAAA,QAAAC,QAIF6B,EAAKnB,kBAAkB,CAC7CuB,aAAcA,EACdE,aAAcA,EACdM,aAAcA,EACdJ,WAAYA,EACZE,cAAeA,EACfI,aAAcA,EACdE,kBAAmBA,EACnBE,qBAAsBA,KACtB9F,KAAA,SATI4D,GAASd,OAAAA,QAAAC,QAYsDH,EAASgB,EAAUkB,IAAY9E,cAAA+F,GAAA,IAArFjC,EAAUiC,EAAjBhC,MAGR,OAFAH,EAAUI,eADgD+B,EAA/B9B,gBAGpB,CACLvB,aAAcA,EACdC,SAAUA,EACVmB,WAAYA,EACZF,UAAWA,EACX,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACN,CAAC,MAAApD,UAAAsC,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGOkB,oBAAmB,SACvBb,EACAC,EACAC,EACAC,OAA0B0D,IAAAA,EA0BpB1F,KAxBA2F,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,qCAEjC,IAAMC,EAAa,IAAIC,gBACvBD,EAAWD,OAAO,aAAc,sBAChCC,EAAWD,OAAO,YAAahE,GAC/BiE,EAAWD,OAAO,gBAAiB/D,GACnCgE,EAAWD,OAAO,QAAS,2IAC3BC,EAAWD,OAAO,WAAY9D,GAE9B,IAAMiE,EAA8B,CAClCC,OAAQ,OACRC,QAASP,EACTpF,KAAMuF,EACNK,SAAU,UACV,OAAA3D,QAAAC,QAAA2D,EAAA,WAEE5D,OAAAA,QAAAC,QACqB4D,MAAMrE,EAAoBgE,IAAetG,cAA1D4G,GAAQC,SAAAA,EAAAC,GAAAC,OAAAjE,QAAAC,QAgBO6D,EAASI,QAAMhH,KAA9BK,SAAAA,GAEN,OADA2F,EAAKiB,IAAI/G,EAAWgH,MAAO,+BAAiCC,KAAKC,UAAU/G,EAAQ,KAAM,IAClFA,EAAOgH,YAAa,EAAA,CAAA,IAAAC,EAhBvB,WAAA,IAACV,EAASW,UAEY,MAApBX,EAASY,OAAc1E,QAAAC,QACE6D,EAASa,QAAMzH,KAAA,SAApC0H,GAEN,MADA1B,EAAKiB,IAAI/G,EAAW2B,MAAoC+E,6BAAAA,EAASY,OAAM,IAAIE,GACrE,IAAIxE,MAAK,gBAAiBwE,EAAgB,GAAA5E,QAAAC,QAGrB6D,EAASa,QAAMzH,cAApC0H,GAEN,MADA1B,EAAKiB,IAAI/G,EAAW2B,MAAK,6BAA+B+E,EAASY,OAAUE,IAAAA,OACjExE,6BAA6B0D,EAASY,OAAU,GAV1D,UAU0DF,GAAAA,EAAAtH,KAAAsH,EAAAtH,KAAA6G,GAAAA,GAAA,EAOhE,EAASc,SAAAA,GACP3B,EAAKiB,IAAI/G,EAAW2B,MAAoC8F,6BAAAA,EAAMC,QAChE,GACF,CAAC,MAAApH,UAAAsC,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGOqB,+BAA8B,SAAC0E,GAAa,IAEhD,IAAMrB,EAAU,IAAIN,QAGpB,OADAM,EAAQL,OAAO,gBAAiB,UAAY0B,GAC5C/E,QAAAC,QAAOyD,EACT,CAAC,MAAAhG,GAAAsC,OAAAA,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGM+C,2BAA0B,SAACgD,GAAa,IAE7C,IAAMrB,EAAU,IAAIN,QAGpB,OADAM,EAAQL,OAAO,gBAAiB,aAAe0B,GAC/C/E,QAAAC,QAAOyD,EACT,CAAC,MAAAhG,UAAAsC,QAAA/B,OAAAP,KAAAsB,EAGKiD,YAAW,SAAC+C,EAAqBzD,EAAqBC,EAA8BkC,GAAgB,QAAAuB,EAgBpGzH,KAZE0H,EAAU,IAAIC,QAAWH,0CAFAzD,EAAW,yBAAyBC,EAAuB,IAEK,CAC7FiC,OAAQ,MACRC,QAASA,IAGP0B,EAAW,KAAKC,EAAAzB,EAChB,WAAA,OAAA5D,QAAAC,QACqB4D,MAAMqB,IAAQhI,KAAA,SAA/B4G,GAAQwB,IAAAA,EACVxB,EAASW,GAAEzE,QAAAC,QACI6D,EAASI,QAAMhH,cAAAqI,GAAhCH,EAAQG,CAAyB,GAAAvF,QAAAC,QAEN6D,EAASa,QAAMzH,KAAA,SAApC0H,GACNK,EAAKd,IAAI/G,EAAW2B,MAAK,qBAAuB+E,EAASY,WAAUE,EAAgB,MAAAU,GAAAA,EAAApI,KAAAoI,OAAAA,EAAApI,KAAA,WAAA,EAAA,EAEvF,EAAS2H,SAAAA,GACPI,EAAKd,IAAI/G,EAAW2B,MAAW8F,IAAAA,EACjC,UAAC7E,QAAAC,QAAAoF,GAAAA,EAAAnI,KAAAmI,EAAAnI,gBAED,OAAOkI,CAAS,GAATA,EACT,CAAC,MAAA1H,GAAA,OAAAsC,QAAA/B,OAAAP,EAAA,CAAA,EAAAsB,EAGKmD,gBAAA,SAAgB6C,EAAqB9C,EAAmBwB,GAAgB,QAAA8B,EAoBtEhI,KAnBN,GAAqB,OAAjB0E,EACF,OAAAlC,QAAAC,QAAO,IAGT,IAAImC,EAAsB,GAAGqD,EAAAC,EACRxD,EAAakD,kBAAvBO,GACT,IACMT,EAAU,IAAIC,QAAWH,EAAW,oBADzBW,EAAOC,SACkD,CACxEnC,OAAQ,MACRC,QAASA,IACRmC,EAAAjC,aAEC5D,OAAAA,QAAAC,QACqB4D,MAAMqB,IAAQhI,KAA/B4G,SAAAA,GAAQgC,IAAAA,EACVhC,EAASW,GAAEzE,QAAAC,QACM6D,EAASI,QAAMhH,cAA5B6I,GACN3D,EAAa1D,KAAKqH,EAAM,GAAA/F,QAAAC,QAEG6D,EAASa,QAAMzH,KAAA,SAApC0H,GACNY,EAAKrB,IAAI/G,EAAW2B,MAAgC+E,yBAAAA,EAASY,OAAM,IAAIE,EAAgB,MAAAkB,GAAAA,EAAA5I,YAAA4I,EAAA5I,KAAA,WAAA,EAAA,EAE3F,EAAS2H,SAAAA,GACPW,EAAKrB,IAAI/G,EAAW2B,MAAW8F,IAAAA,EACjC,GAAC,GAAAgB,GAAAA,EAAA3I,YAAA2I,EAAA3I,KACH,WAAA,EAAA,UAAC8C,QAAAC,QAAAwF,GAAAA,EAAAvI,KAAAuI,EAAAvI,KAED,WAAA,OAAOkF,CAAa,GAAbA,EACT,CAAC,MAAA1E,GAAA,OAAAsC,QAAA/B,OAAAP,KAAAsB,EAIG6D,qBAAA,SACJmC,EACAtB,OAAgBsC,IAAAA,EAQSxI,KANrByI,EAAwB,GACxBC,EAA6B,GAEMC,EAAAvC,EAEnC,WAAA,OAAA5D,QAAAC,QACqB+F,EAAK3D,eAC1B2C,EALoB,4BAOpB,GANgC,GAQhC,KACAtB,IACDxG,KAAAkJ,SAAAA,GAPDH,EAAcG,EAQdJ,EAAK7B,IAAI/G,EAAWgH,MAAO,wBAA0BC,KAAKC,UAAU2B,EAAe,GAAGI,WAAY,KAAM,IAExG,IAAIA,EAAaJ,EAAe,GAAGI,WAAWC,OAAO,SAACC,GAAmB,MAAoB,cAApBA,EAAUC,KAAqB,GAEpGH,EAAWjI,OAAS,GACtB8H,EAAoBxH,KAAK,CAAC2H,WAAYA,IAExCL,EAAK7B,IAAI/G,EAAWgH,MAAO,yBAA2BC,KAAKC,UAAU4B,EAAoB,GAAGG,WAAY,KAAM,GAAI,EACpH,EAAC,SAAQxB,GACPmB,EAAK7B,IAAI/G,EAAW2B,MAAK,+BAAiC8F,EAC5D,UAAC7E,QAAAC,QAAAkG,GAAAA,EAAAjJ,KAAAiJ,EAAAjJ,KAED,WAAA,OAAOgJ,CAAoB,GAApBA,EACT,CAAC,MAAAxI,GAAA,OAAAsC,QAAA/B,OAAAP,KAAAsB,EAGK+D,kBAAA,SACJiC,EACAyB,EACA/C,OAAgBgD,IAAAA,EAUSlJ,KARzB,GAAsB,OAAlBiJ,EACF,OAAAzG,QAAAC,QAAO,IAGT,IAAI0G,EAAwB,GACwBC,EAAAhD,EAEhD,WAAA,OAAA5D,QAAAC,QACqByG,EAAKnE,eAC1ByC,EAJoB,4BAMpByB,EACA/C,IACDxG,KAAA2J,SAAAA,GALDF,EAAcE,EAMdH,EAAKvC,IAAI/G,EAAWgH,MAAO,oBAAsBC,KAAKC,UAAUqC,EAAgB,KAAM,GAAI,EAC5F,EAAC,SAAQ9B,GACP6B,EAAKvC,IAAI/G,EAAW2B,MAAK,4BAA8B8F,EACzD,GAAC7E,OAAAA,QAAAC,QAAA2G,GAAAA,EAAA1J,KAAA0J,EAAA1J,KAED,WAAA,OAAOyJ,CAAe,GAAfA,EACT,CAAC,MAAAjJ,UAAAsC,QAAA/B,OAAAP,KAAAsB,EAGKqD,eAAc,SAClB2C,EACAvD,EACAC,EACAC,EACAO,EACAwB,OAAgBoD,IAAAA,EAWOtJ,KATnBuJ,EAAqB,GACzB,GAAwB,KAApBtF,EACF,OAAAzB,QAAAC,QAAO,IAET,IAAI+G,EAAa,GAAGC,EAAA,WAAA,GAChBtF,EAA4BuF,SAAS,OAAShF,EAAYiF,CAAAA,IAAAA,aAO5DL,EAAK3C,IAAI/G,EAAWgH,MAAO,iCAAkC,EAAAgD,EAAA1B,EANxCxD,EAAakD,SAAQ,SAA/BO,GAEiD,OAA1DqB,EAAa,IADIrB,EAAOC,SACMjE,EAA4B3B,QAAAC,QACvC6G,EAAKO,eAAerC,EAAavD,EAAiBC,EAAsBsF,EAAYtD,IAAQxG,KAAA,SAA3GK,GACJwJ,EAAYrI,KAAKnB,EAAQ,EAC3B,GAAC,OAAA6J,GAAAA,EAAAlK,KAAAkK,EAAAlK,KAAAiK,GAAAA,GAAAG,CAAAA,IAAAA,EAEQ3F,EAA4BuF,SAAS,MAC9CF,EAAarF,EAA4B3B,QAAAC,QACtB6G,EAAKO,eAAerC,EAAavD,EAAiBC,EAAsBsF,EAAYtD,IAAQxG,KAA3GK,SAAAA,GACJwJ,EAAYrI,KAAKnB,GACjBuJ,EAAK3C,IAAI/G,EAAWgH,MAAO,iCAAkC,IAAApE,QAAAC,QAE1C6G,EAAKO,eAAerC,EAAavD,EAAiBC,EAAsBsF,EAAYtD,IAAQxG,KAA3GK,SAAAA,GACJwJ,EAAYrI,KAAKnB,EAAQ,GAAA,GAAA+J,GAAAA,EAAApK,YAAAoK,EAAApK,KAAA8C,WAAAA,EAAAA,CAhBP,GAgBOA,OAAAA,QAAAC,QAAAgH,GAAAA,EAAA/J,KAAA+J,EAAA/J,KAG3B,WAAA,OAAO6J,CAAY,GAAZA,EACT,CAAC,MAAArJ,UAAAsC,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGKqI,eAAc,SAClBrC,EACAvD,EACAC,EACAsF,EACAtD,GAAgB,IAAA,IAAA6D,EAcZ/J,KAZE0H,EAAU,IAAIC,QAAQH,EAAcvD,EAAkBuF,EAAY,CACtEvD,OAAQ,MACRC,QAASA,IAGP8D,EAAa,GAAGC,EAAA7D,EAChB,WAAA,OAAA5D,QAAAC,QACqB4D,MAAMqB,IAAQhI,KAAA,SAA/B4G,GAAQ4D,IAAAA,EACV5D,EAASW,GAAEzE,QAAAC,QACM6D,EAASI,QAAMhH,cAAAyK,GAAlCH,EAAUG,CAAyB,GAAA3H,QAAAC,QAER6D,EAASa,QAAMzH,KAAA,SAApC0H,GACN2C,EAAKpD,IAAI/G,EAAW2B,MAAK,qBAAuB+E,EAASY,WAAUE,EAAgB,MAAA8C,GAAAA,EAAAxK,KAAAwK,OAAAA,EAAAxK,KAAA,aAAA,EAEvF,EAAS2H,SAAAA,GACP0C,EAAKpD,IAAI/G,EAAW2B,MAAU8F,GAAAA,EAChC,UAAC7E,QAAAC,QAAAwH,GAAAA,EAAAvK,KAAAuK,EAAAvK,gBACD,OAAOsK,CAAW,GAAXA,EACT,CAAC,MAAA9J,GAAA,OAAAsC,QAAA/B,OAAAP,EAAA,CAAA,EAAAsB,EAEKuD,eAAA,SACJyC,EACAvD,EACAa,EACAoB,GAAgB,IAAA,IAAAkE,EAyBFpK,KAvBd,GAAmB,OAAf8E,EACF,OAAAtC,QAAAC,QAAO,IAGT,IAAI4H,EAAqB,GAAGC,EAAApC,EACTpD,WAARyF,mBAxLM1J,GACf,IAAA2J,EAAI,GACF,IAAA,IAAAC,KAAA5J,EACA2J,EAAAtJ,KAAAuJ,YAECD,EAAA,SAAA7J,GAAA,OAoLQ8J,SAAAA,GAAa,OAAA,WAAA,GAClBA,GAAc,MAAPA,GAAeC,MAAMC,QAAQJ,EAAKE,IAAKvC,OAAAA,EAC1BqC,EAAKE,YAAhBG,GACT,IAAMjM,EAAKiM,EAAUA,EAAQxC,UAAYwC,EAAQjM,GAAK,KAAKkM,gBACvDlM,EAAE,CACJ,IAAMmM,EAA+B,IAAInD,QAAQH,EAAcvD,EAAkB,IAAMtF,EAAI,CACzFsH,OAAQ,MACRC,QAASA,IACR6E,EAAA3E,EAAA,kBAEC5D,QAAAC,QAC6B4D,MAAMyE,IAAgBpL,cAA/CsL,GAAgB,IAAAC,EAClBD,EAAiB/D,GAAEzE,QAAAC,QACOuI,EAAiBtE,QAAMhH,KAA7CwL,SAAAA,GACNb,EAAYnJ,KAAKgK,EAAe,GAAA1I,QAAAC,QAELuI,EAAiB7D,QAAMzH,cAA5C0H,GACNgD,EAAKzD,IAAI/G,EAAW2B,4BAA6ByJ,EAAiB9D,OAAUE,IAAAA,EAAgB,GAAA6D,GAAAA,GAAAA,EAAAvL,KAAA,OAAAuL,EAAAvL,oBAEhG,EAAC,SAAQ2H,GACP+C,EAAKzD,IAAI/G,EAAW2B,MAAK,GAAK8F,EAChC,GAAC0D,GAAAA,GAAAA,EAAArL,KAAAqL,OAAAA,EAAArL,0BAAAmL,GAAAA,EAAAnL,YAAAmL,EAAAnL,KAAA,WAAA,EAEL,EAEJ,CAzBwB,EAyBxB,CA7MGa,CAAAiK,EAAA7J,GAAA,OAmL0BwK,GAAAA,CACXZ,EA0BpB,GAAC,OAAA/H,QAAAC,QAAA6H,GAAAA,EAAA5K,KAAA4K,EAAA5K,KAAA,WAED,OAAO2K,CAAY,GAAZA,EACT,CAAC,MAAAnK,GAAA,OAAAsC,QAAA/B,OAAAP,KAAAsB,EAGKyD,gBAAA,SACJuC,EACA9C,EACAwB,EACAkF,EACAC,GAAa,IAAA,IAAAC,EAmCTtL,KAjCAuL,EAAuB,GAC3B,GAAiB,KAAbH,EACF,OAAA5I,QAAAC,QAAO,IAGT,IAAI+I,EAAkB,GAEtB,GAAc,WAAVH,EACF,QAA0CI,EAA1CC,EAAAC,EAAqBjH,EAAakD,YAAQ6D,EAAAC,KAAA3K,MAExCyK,EAAkBA,EAFHC,EAAAtM,MACSiJ,SACuB,SAGjDoD,EAAkBH,EAGpB,GAAuB,IAAnBG,EACF,OAAAhJ,QAAAC,QAAO,IAGT,IACMiF,EAAU,IAAIC,QAAQH,wCADM4D,EAAW,WAAaI,EAC0B,CAClFvF,OAAQ,MACRC,QAASA,IAEG0F,EAAAxF,EACV,WAAA,OAAA5D,QAAAC,QACqB4D,MAAMqB,IAAQhI,KAAA,SAA/B4G,GAAQuF,IAAAA,EACVvF,EAASW,GAAEzE,QAAAC,QACA6D,EAASI,QAAMhH,cAAAoM,GAC5BP,EAAcrK,KADV4K,EACqB,GAAAtJ,QAAAC,QAEE6D,EAASa,QAAMzH,cAApC0H,GACNkE,EAAK3E,IAAI/G,EAAW2B,MAAK,wBAA0B+E,EAASY,OAAUE,IAAAA,EAAgB,GAAAyE,GAAAA,GAAAA,EAAAnM,KAAAmM,OAAAA,EAAAnM,oBAE1F,EAAC,SAAQ2H,GACPiE,EAAK3E,IAAI/G,EAAW2B,MAAK,GAAK8F,EAChC,UAAC7E,QAAAC,QAAAmJ,GAAAA,EAAAlM,KAAAkM,EAAAlM,KACD,WAAA,OAAO6L,CAAc,GAAdA,EACT,CAAC,MAAArL,GAAA,OAAAsC,QAAA/B,OAAAP,KAAAsB,EAGG2D,gBAAA,SACJqC,EACA9C,EACAwB,GAAgB,QAAA6F,EA8BZ/L,KA5BJ,IAAK0E,IAAiBA,EAAakD,UAAYlD,EAAakD,SAAShH,QAAU,EAC7E,OAAA4B,QAAAC,QAAO,MAIT,IADA,IAC0CuJ,EADtCC,EAAoB,GACxBC,EAAAP,EAAqBjH,EAAakD,YAAQoE,EAAAE,KAAAnL,MAExCkL,GAAqB,IAFND,EAAA7M,MACSiJ,SAI1B6D,EAAoBA,EAAkBE,UAAU,GAGhD,IAAMzE,EAAU,IAAIC,QACfH,EAAW,gEAAgEyE,EAC9E,IAAA,CACEhG,OAAQ,MACRC,QAASA,IAITqC,EAAO,KAAK6D,EAAAhG,EACZ,WAAA,OAAA5D,QAAAC,QACqB4D,MAAMqB,IAAQhI,KAAA,SAA/B4G,GAAQ+F,IAAAA,EACV/F,EAASW,GAAEzE,QAAAC,QACA6D,EAASI,QAAMhH,cAAA4M,GAA5B/D,EAAI+D,CAAyB,GAAA9J,QAAAC,QAEF6D,EAASa,QAAMzH,KAAA,SAApC0H,GACN2E,EAAKpF,IAAI/G,EAAW2B,MAA+B+E,wBAAAA,EAASY,OAAM,IAAIE,EAAgB,GAAA,GAAAiF,GAAAA,EAAA3M,YAAA2M,EAAA3M,KAE1F,WAAA,EAAA,EAAA,WAAS2H,GACP0E,EAAKpF,IAAI/G,EAAW2B,MAAU8F,GAAAA,EAChC,UAAC7E,QAAAC,QAAA2J,GAAAA,EAAA1M,KAAA0M,EAAA1M,gBAED,OAAO6I,CAAK,GAALA,EACT,CAAC,MAAArI,GAAA,OAAAsC,QAAA/B,OAAAP,EAAA,CAAA,EAAAsB,EAGOuB,iBAAA,SACJyE,EACA+E,EACAC,EACAtG,GAAgB,IAAA,IAAAuG,EAYhBzM,KANM0M,EAAc,kBAFWF,EAAuBG,QAAQ,OAAQ,IAAIC,cAEOL,kBAAAA,EAAgB,IAC3F7E,EAAU,IAAIC,QAAWH,EAAW,4DAA4DqF,mBAAmBH,GAAmB,CAC1IzG,OAAQ,MACRC,QAASA,IAGXuG,EAAK9F,IAAI/G,EAAWgH,MAAO,oBAAsBC,KAAKC,UAAU4F,EAAgB,KAAM,IAEtF,IAAII,EAAY,KAAKC,EAAA3G,EACjB,WAC0E,OAA5EqG,EAAK9F,IAAI/G,EAAWgH,MAAO,aAAeC,KAAKC,UAAUZ,EAAS,KAAM,IAAI1D,QAAAC,QACrD4D,MAAMqB,IAAQhI,KAA/B4G,SAAAA,GACNmG,EAAK9F,IAAI/G,EAAWgH,MAAO,cAAgBC,KAAKC,UAAUR,EAAU,KAAM,IAAI,IAAA0G,EAC1E1G,EAASW,GAAEzE,QAAAC,QACK6D,EAASI,QAAMhH,cAAAuN,GAAjCH,EAASG,CAAyB,GAAAzK,QAAAC,QAEP6D,EAASa,QAAMzH,KAAA,SAApC0H,GACNqF,EAAK9F,IAAI/G,EAAW2B,MAA+B+E,wBAAAA,EAASY,OAAM,IAAIE,EAAgB,GAAA,GAAA4F,GAAAA,EAAAtN,YAAAsN,EAAAtN,KAE1F,WAAA,EAAA,EAAA,EAAS2H,SAAAA,GACPoF,EAAK9F,IAAI/G,EAAW2B,MAAU8F,GAAAA,EAChC,GAAC,OAAA7E,QAAAC,QAAAsK,GAAAA,EAAArN,KAAAqN,EAAArN,KAAA,WAED,OAAOoN,CAAU,GAAVA,EACT,CAAC,MAAA5M,GAAAsC,OAAAA,QAAA/B,OAAAP,EAAA,CAAA,EAAAsB,EAGOyB,4BACJuE,EACAxE,EACAkD,GAAgB,IAAA,IAAAgH,EAAAA,WA6EhB,MAAO,CAAE7J,gBAAAA,EAAiB8J,qBAAAA,EAAuB,EAAAC,EApDzCpN,KAvBR,GAAsB,OAAlBgD,EACF,OAAAR,QAAAC,QAAO,CAAEY,gBAAiB,GAAI8J,qBAAsB,KAGtD,IAAI9J,EAAyB,GACzB8J,EAA8B,GAC5BnH,EAA8B,CAClCC,OAAQ,MACRC,QAASA,GACTmH,EAAAnF,EAEqBlF,EAAc8J,UAAS,SAAnCQ,GACT,IAAMC,EAAaC,OAAOF,EAAS3O,IAAI8O,EAAArH,EAAA,kBACnC5D,QAAAC,QACqB4D,MAASmB,EAAW,mCAAmC+F,EAAU,6BAA8BvH,IAAetG,KAA/H4G,SAAAA,OAAQoH,EACVpH,EAASW,GAAEzE,QAAAC,QACQ6D,EAASI,QAAMhH,KAAA,SAA9BK,GAGN,IAAM4N,EAAoB,gBAAmBJ,EAAU,IAAI,OAAA/K,QAAAC,QACxB4D,MAASmB,EAAyDqF,8CAAAA,mBAAmBc,GAAyB3H,IAAetG,KAAA,SAA1JkO,GAAoB,SAAAC,IAAArL,OAAAA,QAAAC,QAWc4D,MAASmB,EAA8DqF,mDAAAA,mBAAmBc,GAAyB3H,IAAetG,KAAA,SAApKoO,GAAyB,SAAAC,IAU3BhO,EAAOiO,UACTjO,EAAOiO,SAASC,QAAQ,SAACC,GACnBA,EAAQhP,OAASgP,EAAQhP,MAAMa,eAC1BmO,EAAQhP,MAAMa,OAEnBmO,EAAQhP,MAAMiP,OAASD,EAAQhP,MAAMiP,MAAMC,oBACtCF,EAAQhP,MAAMiP,MAAMC,WAE/B,GAIJ,IAAMC,EAAcxH,KAAKyH,MAAMzH,KAAKC,UAAU/G,IAC1CsO,EAAYL,UACdK,EAAYL,SAASC,QAAQ,SAACC,GACxBA,EAAQhP,OAASgP,EAAQhP,MAAMa,eAC1BmO,EAAQhP,MAAMa,OAEnBmO,EAAQhP,MAAMiP,OAASD,EAAQhP,MAAMiP,MAAMC,oBACtCF,EAAQhP,MAAMiP,MAAMC,WAE/B,GAEAjB,EAAqBjM,KAAKmN,GAC1BhL,EAAgBnC,KAAKnB,EAAQ,CAAA,IAAAwO,EAjCzBT,EAA0B7G,GAAEzE,QAAAC,QACQqL,EAA0BpH,QAAMhH,KAAhE8O,SAAAA,GACNpB,EAAKzG,IAAI/G,EAAWgH,MAAO,6BAA+BC,KAAKC,UAAU0H,EAAyB,KAAM,IACxGzO,EAAO,sBAAwByO,EAAwB,qBAAsB,GAAAhM,QAAAC,QAElDqL,EAA0B3G,QAAMzH,KAArD0H,SAAAA,GACNgG,EAAKzG,IAAI/G,EAAW2B,mCAAoCuM,EAA0B5G,OAAM,IAAIE,EAAgB,GAAA,OAAAmH,GAAAA,EAAA7O,KAAA6O,EAAA7O,KAAAqO,GAAAA,GAAAU,EAAAA,CAAAA,IAAAA,EAjB1Gb,EAAqB3G,GAAEzE,QAAAC,QACQmL,EAAqBlH,QAAMhH,cAAtDgP,GACNtB,EAAKzG,IAAI/G,EAAWgH,MAAO,wBAA0BC,KAAKC,UAAU4H,EAAoB,KAAM,IAC9F3O,EAAO,iBAAmB2O,EAAmB,gBAAiB,GAAAlM,QAAAC,QAEnCmL,EAAqBzG,QAAMzH,KAAA,SAAhD0H,GACNgG,EAAKzG,IAAI/G,EAAW2B,MAA+BqM,wBAAAA,EAAqB1G,OAAM,IAAIE,EAAgB,UAAAqH,GAAAA,EAAA/O,KAAA+O,EAAA/O,KAAAmO,GAAAA,GAAA,EAAA,GAAArL,QAAAC,QAwCzE6D,EAASa,QAAMzH,KAApC0H,SAAAA,GACNgG,EAAKzG,IAAI/G,EAAW2B,iCAAkC+E,EAASY,OAAM,IAAIE,EAAgB,GAAA,GAAAsG,GAAAA,EAAAhO,KAAA,OAAAgO,EAAAhO,KAE7F,WAAA,EAAA,EAAA,WAAS2H,GACP+F,EAAKzG,IAAI/G,EAAW2B,SAAU8F,EAChC,GAACoG,GAAAA,GAAAA,EAAA/N,KAAA,OAAA+N,EAAA/N,kBACH,GAAC,OAAA8C,QAAAC,QAAA4K,GAAAA,EAAA3N,KAAA2N,EAAA3N,KAAAwN,GAAAA,IAGH,CAAC,MAAAhN,GAAA,OAAAsC,QAAA/B,OAAAP,EAAA,CAAA,EAAAsB,EAEK2B,kBAAA,SAAiBwL,OACrBvL,EAAYuL,EAAZvL,aACAC,EAAesL,EAAftL,gBACAqB,EAAYiK,EAAZjK,aACAE,EAAY+J,EAAZ/J,aACAM,EAAYyJ,EAAZzJ,aACAJ,EAAU6J,EAAV7J,WACAE,EAAa2J,EAAb3J,cACAI,EAAYuJ,EAAZvJ,aACAE,EAAiBqJ,EAAjBrJ,kBACAE,EAAoBmJ,EAApBnJ,qBACgB,IAChB,IAAIoJ,EAAkB,CAAA,EA4CxB,OA1CsB,MAAhBxL,IACFwL,EAAyB,aAAIxL,GAGR,MAAnBC,IACFuL,EAA4B,gBAAIvL,GAGd,MAAhBqB,IACFkK,EAAyB,aAAIlK,GAGX,MAAhBE,IACFgK,EAAyB,aAAIhK,GAGb,MAAdE,IACF8J,EAAuB,WAAI9J,GAGR,MAAjBE,GAAgD,MAAvBA,EAAcqC,QACzCuH,EAA0B,cAAI5J,GAGZ,MAAhBE,IACF0J,EAAyB,aAAI1J,GAGX,MAAhBE,IACFwJ,EAAyB,aAAIxJ,GAGN,MAArBE,IACFsJ,EAA8B,kBAAItJ,GAGR,MAAxBE,IACFoJ,EAAiC,qBAAIpJ,GAGvCoJ,EAAWlL,eAAiB,GAE9BlB,QAAAC,QAAOmM,EACT,CAAC,MAAA1O,UAAAsC,QAAA/B,OAAAP,EAAAsB,CAAAA,EAAAA,EAGCqN,uBAAA,SAAuBC,EAAoBC,GAEzC,IAAMC,EAAkBF,EAAWnC,QAAQ,OAAQ,IAAIC,cAKvD,OAF2BmC,EAASE,IAAI,SAAAC,GAAW,OAAAA,EAAQvC,QAAQ,OAAQ,IAAIC,aAAa,GAElEuC,MAAM,SAAAD,UAAWF,EAAgBtF,SAASwF,EAAQ,EAC9E,EAAC1N,EAED4N,eAAA,SAAeC,GACb,IAAK,IAAMC,KAAYD,EACrB,GAAIA,EAAOE,eAAeD,GACxB,GAAgC,iBAArBD,EAAOC,GAAwB,CACxC,IAAM3Q,EAAKqB,KAAKoP,eAAeC,EAAOC,IACtC,GAAI3Q,EAAI,OAAOA,CACjB,SAAwB,OAAb2Q,GAAkC,aAAbA,EAC9B,OAAOD,EAAOC,GAIpB,OACF,IAAA,EAAC9N,EAEDmF,IAAA,SAAIjF,EAAmB4F,GACjB5F,GAAS1B,KAAKsB,iBAChBkO,QAAQ7I,IAAIW,EAEhB,EAACjG,CAAA"}