{"version":3,"file":"index.esm.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  userDashboardList?: any;\r\n  userDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n\r\n  private currentLogLevel: LOG_LEVELS;\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n  \r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n    const userDashboardList = await this.getUserDashboardList(dt_gen2_environment, auth_header);\r\n    const userDashboardDetails = await this.getDashboardsData(dt_gen2_environment, userDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      userDashboardList: userDashboardList,\r\n      userDashboardDetails: userDashboardDetails\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n  async getUserDashboardList(\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getUserDashboardList Error: ${error}`);\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\") && !entitiesList) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    }\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n\r\n            // Fetch direct-shares information\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=documentId%3D%3D%27${documentId}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n\r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n        }\r\n      }\r\n    \r\n      return documentDetails;\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      userDashboardList,\r\n      userDashboardDetails\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n      if (userDashboardList != null) {\r\n        audit_info[\"userDashboardList\"] = userDashboardList;\r\n      }\r\n\r\n      if (userDashboardDetails != null) {\r\n        audit_info[\"userDashboardDetails\"] = userDashboardDetails;\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      return keywords.every(keyword => inputValue.toLowerCase().includes(keyword.toLowerCase()));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_iteratorSymbol","Symbol","iterator","pact","state","value","s","_Pact","o","_settle","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","array","body","check","reject","_cycle","i","length","target","step","done","_fixup","TypeError","push","_forTo","values","DTFunctions","currentLogLevel","ERROR","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","documentList","auditInfo","_ref2","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref3","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getUserDashboardList","userDashboardList","getDashboardsData","userDashboardDetails","_ref4","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","_catch","fetch","response","_temp2","_result2","_exit","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","_forOf","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_this8","config_list","parameters","_temp13","includes","_temp11","_temp10","callConfigList","_temp14","_this9","configlist","_temp16","_temp15","_response$json2","_this10","configsData","_temp20","item","keys","key","Array","isArray","subItem","_temp19","request_details","_temp18","response_details","_temp17","configdetails","_forIn","schemaId","scope","_this11","settings_list","generated_scope","_iterator","_step","_createForOfIteratorHelperLoose","_temp22","_temp21","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp24","_temp23","_response$json4","document_type","document_name_to_query","_this13","documentFilter","encodeURIComponent","documents","_temp26","_temp25","_response$json5","_this14","_temp31","document","documentId","String","_temp30","_temp29","directSharesResponse","_temp28","_temp27","directSharesResult","_ref5","audit_info","checkKeywordsExistence","inputValue","keywords","every","keyword","toLowerCase","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"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"}