{"version":3,"file":"index.esm.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  classicDashboardList?: any;\r\n  classicDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n  private currentLogLevel: LOG_LEVELS;\r\n  private jsonSizeThreshold = 20000; // Set the size threshold in bytes\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n\r\n    const classicDashboardList = await this.getClassicDashboardList(dt_gen2_environment, auth_header);\r\n    const classicDashboardDetails = await this.getDashboardsData(dt_gen2_environment, classicDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      classicDashboardList: classicDashboardList,\r\n      classicDashboardDetails: classicDashboardDetails\r\n\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n\r\n  async getClassicDashboardList(\r\n\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n\r\n      this.log(LOG_LEVELS.ERROR, `getClassicDashboardList Error: ${error}`);\r\n\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    this.log(LOG_LEVELS.DEBUG, \"entitieslist in config_list:\\n\" + JSON.stringify(entitiesList, null, 2));\r\n    this.log(LOG_LEVELS.DEBUG, \"config_endpoint_extra_param:\" + config_endpoint_extra_param);\r\n    if (config_endpoint_extra_param.includes(\"/\") && entitiesList) {\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n\r\n      this.log(LOG_LEVELS.DEBUG, \"config_list:\\n\" + JSON.stringify(config_list, null, 2));\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    } else {\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with no param\");\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"config_list before:\\n\" + JSON.stringify(config_list, null, 2));\r\n      // Filter the config_list based on config_name_to_query\r\n      if (config_name_to_query != \"\") {\r\n        config_list = config_list.map(config => {\r\n          return {\r\n            ...config,\r\n            values: config.values.filter((item: any) => item.name.toLowerCase().includes(config_name_to_query.toLowerCase()))\r\n          };\r\n        }).filter(config => config.values.length > 0);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"config_list after:\\n\" + JSON.stringify(config_list, null, 2));\r\n    }\r\n\r\n\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n\r\n    // Normalize the document_name_to_query by removing spaces and converting to lowercase\r\n    //const normalizedDocumentName = document_name_to_query.replace(/\\s+/g, '').toLowerCase();\r\n\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n    \r\n            // Fetch direct-shares information\r\n            const documentSharesFilter = `documentId=='${documentId}'`;\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            // Fetch environment-shares information\r\n            const environmentSharesResponse = await fetch(`${environment}/platform/document/v1/environment-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (environmentSharesResponse.ok) {\r\n              const environmentSharesResult = await environmentSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"environmentSharesResult:\\n\" + JSON.stringify(environmentSharesResult, null, 2));\r\n              result[\"environment-shares\"] = environmentSharesResult[\"environment-shares\"];\r\n            } else {\r\n              const errorDetails = await environmentSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Environment Shares Error: ${environmentSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            if (result.sections) {\r\n              result.sections.forEach((section: any) => {\r\n                if (section.state) {\r\n                  if (section.state.result) {\r\n                    delete section.state.result;\r\n                  }\r\n                  if (section.state.davis && section.state.davis.resultState) {\r\n                    delete section.state.davis.resultState;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n    \r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);\r\n        }\r\n      }\r\n    \r\n      // Check the size of the resulting JSON\r\n      const jsonString = JSON.stringify(documentDetails);\r\n      const jsonSize = new Blob([jsonString]).size;\r\n      this.log(LOG_LEVELS.DEBUG, \"jsonSize:\" + jsonSize);\r\n      if (jsonSize > this.jsonSizeThreshold) {\r\n        this.log(LOG_LEVELS.DEBUG, \"jsonSize exceed \" + this.jsonSizeThreshold);\r\n        documentDetails = [{ warning: \"The size of the JSON output is too large\" }];\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"documentDetails:\\n\" + JSON.stringify(documentDetails, null, 2));\r\n      return documentDetails;\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      classicDashboardList,\r\n      classicDashboardDetails\r\n\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n\r\n      if (classicDashboardList != null) {\r\n        audit_info[\"classicDashboardList\"] = classicDashboardList;\r\n      }\r\n\r\n      if (classicDashboardDetails != null) {\r\n        audit_info[\"classicDashboardDetails\"] = classicDashboardDetails;\r\n\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      // Normalize the input by removing spaces and converting to lowercase\r\n      const normalizedInput = inputValue.replace(/\\s+/g, '').toLowerCase();\r\n\r\n      // Normalize the keywords by removing spaces and converting to lowercase\r\n      const normalizedKeywords = keywords.map(keyword => keyword.replace(/\\s+/g, '').toLowerCase());\r\n    \r\n      return normalizedKeywords.every(keyword => normalizedInput.includes(keyword));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_catch","body","recover","result","e","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","array","check","reject","_cycle","i","length","_forOf","target","step","next","done","_fixup","TypeError","values","push","DTFunctions","currentLogLevel","ERROR","jsonSizeThreshold","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","documentList","auditInfo","_ref2","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref3","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getClassicDashboardList","classicDashboardList","getDashboardsData","classicDashboardDetails","_ref4","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","fetch","response","_temp2","_result2","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_this8","config_list","parameters","_temp13","includes","_temp11","_temp10","callConfigList","_temp14","map","config","_extends","item","name","toLowerCase","_this9","configlist","_temp16","_temp15","_response$json2","_this10","configsData","_temp20","_forIn","key","keys","_forTo","Array","isArray","subItem","_temp19","request_details","_temp18","response_details","_temp17","configdetails","schemaId","scope","_this11","settings_list","generated_scope","_iterator","_step","_createForOfIteratorHelperLoose","_temp22","_temp21","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp24","_temp23","_response$json4","document_type","document_name_to_query","_this13","documentFilter","encodeURIComponent","documents","_temp26","_temp25","_response$json5","_temp34","jsonString","jsonSize","Blob","size","_this14","warning","_temp33","document","documentId","String","_temp32","_temp31","documentSharesFilter","directSharesResponse","_temp30","environmentSharesResponse","_temp28","sections","forEach","section","davis","resultState","_temp27","environmentSharesResult","_temp29","directSharesResult","_ref5","audit_info","checkKeywordsExistence","inputValue","keywords","normalizedInput","replace","keyword","every","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"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"}