{"version":3,"file":"index.umd.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n\r\n\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n  \r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n      const result = await response.json();\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      let errorDetails;\r\n      if (error.response) {\r\n        errorDetails = await error.response.text();\r\n        console.error(\"oAuth Access Token Error:\", error.response.status, errorDetails);\r\n      } else {\r\n        console.error(\"oAuth Access Token Error:\", error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Entity ID Error:\", response.status, errorDetails);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            console.error(\"Entity Details Error:\", response.status, errorDetails);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\" || !entitiesList) {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\")) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    }\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        console.error(\"ConfigList Error:\", response.status, errorDetails);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  console.error(\"Config Data Error:\", response_details.status, errorDetails);\r\n                }\r\n              } catch (error) {\r\n                console.error(error);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        console.error(\"Settings Data Error:\", response.status, errorDetails);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      console.error(\"Problems Data Error:\", response.status, errorDetails);\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(environment: string, document_type: string, document_name_to_query: string, headers: Headers): Promise<any> {\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let documents = null;\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        console.error(\"Document List Error:\", response.status, errorDetails);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    return documents;\r\n  }    \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(environment: string, documentsList: any, headers: Headers): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n  \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            console.error(\"Document Details Error:\", response.status, errorDetails);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n  \r\n      return documentDetails;\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      return keywords.every(keyword => inputValue.toLowerCase().includes(keyword.toLowerCase()));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n\r\n}\r\n\r\n  export default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","DTFunctions","_proto","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","_this","this","oauth_header","Promise","resolve","getOauthAccessToken","then","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","documentList","auditInfo","_ref2","finalScore","score","assertionFails","assertion_fails","e","reject","performGradingGen2","_ref3","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","_ref4","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","_catch","fetch","response","json","result","access_token","error","_temp","text","_error$response$text","console","status","message","token","environment","request","Request","entities","_temp3","_temp2","ok","_response$json","errorDetails","_temp6","_forOf","entity","entityId","_temp5","_temp4","data","push","_this3","config_list","parameters","_temp9","includes","_temp7","callConfigList","_temp10","configlist","_temp12","_temp11","_response$json2","configsData","_temp16","item","target","keys","key","i","Array","isArray","subItem","_temp15","request_details","_temp14","response_details","_temp13","configdetails","_forIn","schemaId","scope","settings_list","generated_scope","_iterator","_step","_createForOfIteratorHelperLoose","done","value","_temp18","_temp17","_response$json3","length","_step2","rootCauseEntities","_iterator2","substring","_temp20","_temp19","_response$json4","document_type","document_name_to_query","encodeURIComponent","documents","_temp22","_temp21","_response$json5","_temp25","document","documentId","String","_temp24","_temp23","_ref5","audit_info","checkKeywordsExistence","inputValue","keywords","every","keyword","toLowerCase","findIdInObject","object","property","hasOwnProperty","Symbol","iterator","_settle","pact","state","s","_Pact","o","bind","v","observer","onFulfilled","onRejected","callback","_isSettledPact","thenable","_forTo","array","check","_cycle","step","next","_iteratorSymbol","_fixup","TypeError","values"],"mappings":"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"}