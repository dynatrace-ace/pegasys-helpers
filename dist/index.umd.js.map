{"version":3,"file":"index.umd.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  classicDashboardList?: any;\r\n  classicDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n  private currentLogLevel: LOG_LEVELS;\r\n  private jsonSizeThreshold = 20000; // Set the size threshold in bytes\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n\r\n    const classicDashboardList = await this.getClassicDashboardList(dt_gen2_environment, auth_header);\r\n    const classicDashboardDetails = await this.getDashboardsData(dt_gen2_environment, classicDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      classicDashboardList: classicDashboardList,\r\n      classicDashboardDetails: classicDashboardDetails\r\n\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n\r\n  async getClassicDashboardList(\r\n\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n\r\n      this.log(LOG_LEVELS.ERROR, `getClassicDashboardList Error: ${error}`);\r\n\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\") && !entitiesList) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      // Filter the config_list based on config_name_to_query\r\n      if (config_name_to_query != \"\") {\r\n        config_list = config_list.map(config => {\r\n          return {\r\n            ...config,\r\n            values: config.values.filter((item: any) => item.name.toLowerCase().includes(config_name_to_query.toLowerCase()))\r\n          };\r\n        }).filter(config => config.values.length > 0);\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n\r\n    // Normalize the document_name_to_query by removing spaces and converting to lowercase\r\n    //const normalizedDocumentName = document_name_to_query.replace(/\\s+/g, '').toLowerCase();\r\n\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n    \r\n            // Fetch direct-shares information\r\n            const documentSharesFilter = `documentId=='${documentId}'`;\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            // Fetch environment-shares information\r\n            const environmentSharesResponse = await fetch(`${environment}/platform/document/v1/environment-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (environmentSharesResponse.ok) {\r\n              const environmentSharesResult = await environmentSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"environmentSharesResult:\\n\" + JSON.stringify(environmentSharesResult, null, 2));\r\n              result[\"environment-shares\"] = environmentSharesResult[\"environment-shares\"];\r\n            } else {\r\n              const errorDetails = await environmentSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Environment Shares Error: ${environmentSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            if (result.sections) {\r\n              result.sections.forEach((section: any) => {\r\n                if (section.state) {\r\n                  if (section.state.result) {\r\n                    delete section.state.result;\r\n                  }\r\n                  if (section.state.davis && section.state.davis.resultState) {\r\n                    delete section.state.davis.resultState;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n    \r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);\r\n        }\r\n      }\r\n    \r\n      // Check the size of the resulting JSON\r\n      const jsonString = JSON.stringify(documentDetails);\r\n      const jsonSize = new Blob([jsonString]).size;\r\n      this.log(LOG_LEVELS.DEBUG, \"jsonSize:\" + jsonSize);\r\n      if (jsonSize > this.jsonSizeThreshold) {\r\n        this.log(LOG_LEVELS.DEBUG, \"jsonSize exceed \" + this.jsonSizeThreshold);\r\n        documentDetails = [{ warning: \"The size of the JSON output is too large\" }];\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"documentDetails:\\n\" + JSON.stringify(documentDetails, null, 2));\r\n      return documentDetails;\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      classicDashboardList,\r\n      classicDashboardDetails\r\n\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n\r\n      if (classicDashboardList != null) {\r\n        audit_info[\"classicDashboardList\"] = classicDashboardList;\r\n      }\r\n\r\n      if (classicDashboardDetails != null) {\r\n        audit_info[\"classicDashboardDetails\"] = classicDashboardDetails;\r\n\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      // Normalize the input by removing spaces and converting to lowercase\r\n      const normalizedInput = inputValue.replace(/\\s+/g, '').toLowerCase();\r\n\r\n      // Normalize the keywords by removing spaces and converting to lowercase\r\n      const normalizedKeywords = keywords.map(keyword => keyword.replace(/\\s+/g, '').toLowerCase());\r\n    \r\n      return normalizedKeywords.every(keyword => normalizedInput.includes(keyword));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","array","body","check","reject","_cycle","i","length","_forOf","target","step","next","done","_fixup","TypeError","values","push","DTFunctions","currentLogLevel","ERROR","jsonSizeThreshold","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","documentList","auditInfo","_ref2","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref3","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getClassicDashboardList","classicDashboardList","getDashboardsData","classicDashboardDetails","_ref4","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","_catch","fetch","response","_temp2","_result2","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_this8","config_list","parameters","_temp13","includes","_temp11","_temp10","callConfigList","_temp14","map","config","_extends","item","name","toLowerCase","_this9","configlist","_temp16","_temp15","_response$json2","_this10","configsData","_temp20","key","keys","_forTo","Array","isArray","subItem","_temp19","request_details","_temp18","response_details","_temp17","configdetails","_forIn","schemaId","scope","_this11","settings_list","generated_scope","_step","_iterator","_createForOfIteratorHelperLoose","_temp22","_temp21","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp24","_temp23","_response$json4","document_type","document_name_to_query","_this13","documentFilter","encodeURIComponent","documents","_temp26","_temp25","_response$json5","_temp34","jsonString","jsonSize","Blob","size","_this14","warning","_temp33","document","documentId","String","_temp32","_temp31","documentSharesFilter","directSharesResponse","_temp30","environmentSharesResponse","_temp28","sections","forEach","section","davis","resultState","_temp27","environmentSharesResult","_temp29","directSharesResult","_ref5","audit_info","checkKeywordsExistence","inputValue","keywords","normalizedInput","replace","keyword","every","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"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"}