{"version":3,"file":"index.umd.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  userDashboardList?: any;\r\n  userDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n  private currentLogLevel: LOG_LEVELS;\r\n  private jsonSizeThreshold = 200000; // Set the size threshold in bytes\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const  { documentDetails } = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n  \r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n    const userDashboardList = await this.getUserDashboardList(dt_gen2_environment, auth_header);\r\n    const userDashboardDetails = await this.getDashboardsData(dt_gen2_environment, userDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      userDashboardList: userDashboardList,\r\n      userDashboardDetails: userDashboardDetails\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n  async getUserDashboardList(\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getUserDashboardList Error: ${error}`);\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\") && !entitiesList) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    }\r\n\r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n\r\n    // Normalize the document_name_to_query by removing spaces and converting to lowercase\r\n    const normalizedDocumentName = document_name_to_query.replace(/\\s+/g, '').toLowerCase();\r\n\r\n    const documentFilter = `name contains '${normalizedDocumentName}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<{ documentDetails: any[] }> {\r\n      if (documentsList === null) {\r\n        return { documentDetails: [] };\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n\r\n            // Fetch direct-shares information\r\n            const documentSharesFilter = `documentId=='${documentId}'`;\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n\r\n            // Fetch environment-shares information\r\n            const environmentSharesResponse = await fetch(`${environment}/platform/document/v1/environment-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (environmentSharesResponse.ok) {\r\n              const environmentSharesResult = await environmentSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"environmentSharesResult:\\n\" + JSON.stringify(environmentSharesResult, null, 2));\r\n              result[\"environment-shares\"] = environmentSharesResult[\"environment-shares\"];\r\n            } else {\r\n              const errorDetails = await environmentSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Environment Shares Error: ${environmentSharesResponse.status} ${errorDetails}`);\r\n            }\r\n\r\n            if (result.sections) {\r\n              result.sections.forEach((section: any) => {\r\n                if (section.state && section.state.result) {\r\n                  delete section.state.result;\r\n                }\r\n                if (section.state.davis && section.state.davis.resultState) {\r\n                  delete section.state.davis.resultState;\r\n                }\r\n              });\r\n            }\r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n        }\r\n      }\r\n    \r\n      // Check the size of the resulting JSON\r\n      const jsonString = JSON.stringify(documentDetails);\r\n      const jsonSize = new Blob([jsonString]).size;\r\n      if (jsonSize > this.jsonSizeThreshold) {\r\n        documentDetails.push({ warning: \"The size of the JSON output is too large\" });\r\n      }\r\n\r\n      return { documentDetails};\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      userDashboardList,\r\n      userDashboardDetails\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n      if (userDashboardList != null) {\r\n        audit_info[\"userDashboardList\"] = userDashboardList;\r\n      }\r\n\r\n      if (userDashboardDetails != null) {\r\n        audit_info[\"userDashboardDetails\"] = userDashboardDetails;\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      // Normalize the input by removing spaces and converting to lowercase\r\n      const normalizedInput = inputValue.replace(/\\s+/g, '').toLowerCase();\r\n\r\n      // Normalize the keywords by removing spaces and converting to lowercase\r\n      const normalizedKeywords = keywords.map(keyword => keyword.replace(/\\s+/g, '').toLowerCase());\r\n    \r\n      return normalizedKeywords.every(keyword => normalizedInput.includes(keyword));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","array","body","check","reject","_cycle","i","length","_forOf","target","step","next","done","_fixup","TypeError","values","push","DTFunctions","currentLogLevel","ERROR","jsonSizeThreshold","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","_ref2","generateAuditInfo","documentList","documentDetails","auditInfo","_ref3","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref4","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getUserDashboardList","userDashboardList","getDashboardsData","userDashboardDetails","_ref5","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","_catch","fetch","response","_temp2","_result2","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_this8","config_list","parameters","_temp13","includes","_temp11","_temp10","callConfigList","_temp14","_this9","configlist","_temp16","_temp15","_response$json2","_this10","configsData","_temp20","item","key","keys","_forTo","Array","isArray","subItem","_temp19","request_details","_temp18","response_details","_temp17","configdetails","_forIn","schemaId","scope","_this11","settings_list","generated_scope","_step","_iterator","_createForOfIteratorHelperLoose","_temp22","_temp21","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp24","_temp23","_response$json4","document_type","document_name_to_query","_this13","documentFilter","replace","toLowerCase","encodeURIComponent","documents","_temp26","_temp25","_response$json5","_temp34","jsonString","Blob","size","_this14","warning","_temp33","document","documentId","String","_temp32","_temp31","documentSharesFilter","directSharesResponse","_temp30","environmentSharesResponse","_temp28","sections","forEach","section","davis","resultState","_temp27","environmentSharesResult","_temp29","directSharesResult","_ref6","audit_info","checkKeywordsExistence","inputValue","keywords","normalizedInput","map","keyword","every","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"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"}