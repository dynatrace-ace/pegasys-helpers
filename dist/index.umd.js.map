{"version":3,"file":"index.umd.js","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","export enum LOG_LEVELS {\r\n  NONE = 0,\r\n  ERROR = 1,\r\n  WARN = 2,\r\n  INFO = 3,\r\n  DEBUG = 4\r\n}\r\n\r\n//let currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR; // Set the desired log level here\r\n\r\ninterface PlatformParams {\r\n  oauth_client_id: string;\r\n  oauth_client_secret: string;\r\n  dt_account_urn: string;\r\n  oauth_sso_endpoint: string;\r\n  dt_platform_environment: string;\r\n  documentType: string;\r\n  documentName: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  getScore: (auditInfo: any, headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\ninterface Gen2Params {\r\n  dt_gen2_environment: string;\r\n  dt_access_token: string;\r\n  validationId: string;\r\n  maxScore: number;\r\n  entity_type: string;\r\n  entity_name_to_query: string;\r\n  config_endpoint: string;\r\n  config_name_to_query: string;\r\n  config_endpoint_extra_param: string;\r\n  settings_schema_id: string;\r\n  settings_scope: string;\r\n  getScore: (auditInfo: any,headers: Headers) => Promise<{ score: number, assertion_fails: any[] }>;\r\n}\r\n\r\n\r\ninterface AuditInfoParams {\r\n  documentList?: any;\r\n  documentDetails?: any;\r\n  entitiesList?: any;\r\n  entitiesData?: any;\r\n  settingsData?: any;\r\n  configList?: any;\r\n  configDetails?: any;\r\n  problemsData?: any;\r\n  classicDashboardList?: any;\r\n  classicDashboardDetails?: any;\r\n}\r\n\r\nclass DTFunctions {\r\n  private currentLogLevel: LOG_LEVELS;\r\n  private jsonSizeThreshold = 20000; // Set the size threshold in bytes\r\n\r\n  constructor(currentLogLevel: LOG_LEVELS = LOG_LEVELS.ERROR) {\r\n    this.currentLogLevel = currentLogLevel;\r\n  }\r\n\r\n  setLogLevel(level: LOG_LEVELS): void {\r\n    this.currentLogLevel = level;\r\n  }\r\n   // A boilerplate function to perform a series of operations\r\n   async performGradingPlatform({\r\n    oauth_client_id,\r\n    oauth_client_secret,\r\n    dt_account_urn,\r\n    oauth_sso_endpoint,\r\n    dt_platform_environment,\r\n    documentType,\r\n    documentName,\r\n    validationId,\r\n    maxScore,\r\n    getScore\r\n  }: PlatformParams): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeaderPlatform(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({ documentList: documentsList, documentDetails: documentDetails });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo, oauth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  \r\n  async performGradingGen2({\r\n    dt_gen2_environment,\r\n    dt_access_token,\r\n    validationId,\r\n    maxScore,\r\n    entity_type,\r\n    entity_name_to_query,\r\n    config_endpoint,\r\n    config_name_to_query,\r\n    config_endpoint_extra_param,\r\n    settings_schema_id,\r\n    settings_scope,\r\n    getScore\r\n  }: Gen2Params): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n      // Get the authorization header\r\n    const auth_header = await this.getAuthorizationHeaderGen2(dt_access_token);\r\n  \r\n    // Get the entities list\r\n    const entitiesList = await this.getEntities(dt_gen2_environment, entity_type, entity_name_to_query, auth_header);\r\n  \r\n    // Get the entities data\r\n    const entitiesData = await this.getEntitiesData(dt_gen2_environment, entitiesList, auth_header);\r\n  \r\n    // Get API v1 config data\r\n    const configList = await this.getConfigsList(dt_gen2_environment, config_endpoint, config_name_to_query, config_endpoint_extra_param, entitiesList, auth_header);\r\n    const configDetails = await this.getConfigsData(dt_gen2_environment, config_endpoint, configList, auth_header);\r\n\r\n    // Get the settings data\r\n    const settingsData = await this.getSettingsData(dt_gen2_environment, entitiesList, auth_header, settings_schema_id, settings_scope);\r\n  \r\n    // Get the problems data\r\n    const problemsData = await this.getProblemsData(dt_gen2_environment, entitiesList, auth_header);\r\n \r\n    // Get Dashboard List\r\n    const classicDashboardList = await this.getClassicDashboardList(dt_gen2_environment, auth_header);\r\n    const classicDashboardDetails = await this.getDashboardsData(dt_gen2_environment, classicDashboardList, auth_header);\r\n\r\n\r\n      // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo({\r\n      entitiesList: entitiesList,\r\n      entitiesData: entitiesData,\r\n      settingsData: settingsData,\r\n      configList: configList,\r\n      configDetails: configDetails,\r\n      problemsData: problemsData,\r\n      classicDashboardList: classicDashboardList,\r\n      classicDashboardDetails: classicDashboardDetails\r\n    });\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo,auth_header);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n}\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:admin document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n  \r\n      if (!response.ok) {\r\n        // Check if the response status is 400\r\n        if (response.status === 400) {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`Bad Request: ${errorDetails}`);\r\n        } else {\r\n          // Handle other non-OK responses\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${response.status} ${errorDetails}`);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      }\r\n  \r\n      const result = await response.json();\r\n      this.log(LOG_LEVELS.DEBUG, \"oAuth Access Token result:\\n\" + JSON.stringify(result, null, 2));\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      this.log(LOG_LEVELS.ERROR, `oAuth Access Token Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeaderPlatform(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the authorization header\r\n    async  getAuthorizationHeaderGen2(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n\r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          this.log(LOG_LEVELS.ERROR, `\"Entity ID Error: ${response.status} ${errorDetails}`);\r\n        }\r\n      } catch (error) {\r\n        this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Entity Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, ` ${error}`);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n\r\n  // A utility function to get the dashboard configs list\r\n  async getClassicDashboardList(\r\n    environment: string,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let dashboard_list: any[] = [];\r\n    let user_dashboard_list: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n    const config_endpoint_extra_param = \"\";\r\n    \r\n    try {\r\n      dashboard_list = await this.getConfigsList(\r\n        environment,\r\n        config_endpoint,\r\n        \"\", \r\n        config_endpoint_extra_param,\r\n        null,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboard_list raw:\\n\" + JSON.stringify(dashboard_list[0].dashboards, null, 2));\r\n      // Filter the dashboards based on the owner field\r\n      let dashboards = dashboard_list[0].dashboards.filter((dashboard: any) => dashboard.owner !== \"Dynatrace\");\r\n    \r\n      if (dashboards.length > 0) {\r\n        user_dashboard_list.push({dashboards: dashboards});\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"user_dashboard_list:\\n\" + JSON.stringify(user_dashboard_list[0].dashboards, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getClassicDashboardList Error: ${error}`);\r\n    }\r\n\r\n    return user_dashboard_list;\r\n  }\r\n\r\n\r\n  async getDashboardsData(\r\n    environment: string,\r\n    dashboardList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (dashboardList === null) {\r\n      return [];\r\n    }\r\n\r\n    let dashboardsData: any[] = [];\r\n    const config_endpoint = \"/api/config/v1/dashboards\";\r\n\r\n    try {\r\n      dashboardsData = await this.getConfigsData(\r\n        environment,\r\n        config_endpoint,\r\n        dashboardList,\r\n        headers\r\n      );\r\n      this.log(LOG_LEVELS.DEBUG, \"dashboardsData:\\n\" + JSON.stringify(dashboardsData, null, 2));\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `getDashboardsData Error: ${error}`);\r\n    }\r\n\r\n    return dashboardsData;\r\n  }\r\n\r\n  // A utility function to get the configs list\r\n  async getConfigsList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    config_endpoint_extra_param: string,\r\n    entitiesList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    let config_list: any[] = [];\r\n    if (config_endpoint === \"\") {\r\n      return [];\r\n    }\r\n    let parameters = \"\";\r\n    if (config_endpoint_extra_param.includes(\"/\") && !entitiesList) {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        parameters = \"/\" + entityId + config_endpoint_extra_param;\r\n        let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n        config_list.push(result);\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param /\");\r\n    } else if (config_endpoint_extra_param.includes(\"?\")) {\r\n      parameters = config_endpoint_extra_param;\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n      this.log(LOG_LEVELS.DEBUG, \"Config List with extra param ?\");\r\n    } else {\r\n      let result = await this.callConfigList(environment, config_endpoint, config_name_to_query, parameters, headers);\r\n      config_list.push(result);\r\n    }\r\n    // Filter the config_list based on config_name_to_query\r\n    if (config_name_to_query != \"\") {\r\n      config_list = config_list.map(config => {\r\n        return {\r\n          ...config,\r\n          values: config.values.filter((item: any) => item.name.includes(config_name_to_query))\r\n        };\r\n      }).filter(config => config.values.length > 0);\r\n    }\r\n  \r\n    return config_list;\r\n  }\r\n\r\n  // A utility function to call the config list\r\n  async callConfigList(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    config_name_to_query: string,\r\n    parameters: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n    const request = new Request(environment + config_endpoint + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let configlist = [];\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        configlist = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `ConfigList Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);      \r\n    }\r\n    return configlist;\r\n  }\r\n  \r\n  async getConfigsData(\r\n    environment: string,\r\n    config_endpoint: string,\r\n    configList: any,\r\n    headers: Headers\r\n  ): Promise<any[]> {\r\n    if (configList === null) {\r\n      return [];\r\n    }\r\n\r\n    let configsData: any[] = [];\r\n    for (const item of configList) {\r\n      for (const key in item) {\r\n        if (key && key != null && Array.isArray(item[key])) {\r\n          for (const subItem of item[key]) {\r\n            const id = subItem ? subItem.entityId || subItem.id : null;\r\n            if (id) {\r\n              const request_details: RequestInfo = new Request(environment + config_endpoint + \"/\" + id, {\r\n                method: 'GET',\r\n                headers: headers,\r\n              });\r\n\r\n              try {\r\n                const response_details = await fetch(request_details);\r\n                if (response_details.ok) {\r\n                  const configdetails = await response_details.json();\r\n                  configsData.push(configdetails);\r\n                } else {\r\n                  const errorDetails = await response_details.text();\r\n                  this.log(LOG_LEVELS.ERROR, `Config Data Error: ${response_details.status} ${errorDetails}`);\r\n                }\r\n              } catch (error) {\r\n                this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return configsData;\r\n  }\r\n\r\n  // A utility function to get the settings data with schema\r\n  async getSettingsData(\r\n    environment: string,\r\n    entitiesList: any,\r\n    headers: Headers,\r\n    schemaId: string,\r\n    scope: string\r\n  ): Promise<any[]> {\r\n    let settings_list: any[] = [];\r\n    if (schemaId === \"\") {\r\n      return [];\r\n    }\r\n\r\n    let generated_scope = \"\";\r\n    // if scope equals \"entity\", replace the dynamic entityID, if the scope is \"environment\" it will remain as is\r\n    if (scope === \"entity\") {\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        generated_scope = generated_scope + entityId + \",\";\r\n      }\r\n    } else {\r\n      generated_scope = scope;\r\n    }\r\n\r\n    if (generated_scope == \"\") {\r\n      return [];\r\n    }\r\n\r\n    const parameters = \"schemaIds=\" + schemaId + \"&scopes=\" + generated_scope;\r\n    const request = new Request(environment + \"/api/v2/settings/objects?\" + parameters, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n    let data = {};\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        data = await response.json();\r\n        settings_list.push(data);\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Settings Data Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n    return settings_list;\r\n  }\r\n\r\n// A utility function to find the Problems\r\nasync getProblemsData(\r\n  environment: string,\r\n  entitiesList: any,\r\n  headers: Headers\r\n): Promise<any> {\r\n  if (!entitiesList || !entitiesList.entities || entitiesList.entities.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  let rootCauseEntities = \"\";\r\n  for (const entity of entitiesList.entities) {\r\n    const entityId = entity.entityId;\r\n    rootCauseEntities += \",\" + entityId;\r\n  }\r\n  // Remove the leading comma\r\n  rootCauseEntities = rootCauseEntities.substring(1);\r\n\r\n  // Create the request object\r\n  const request = new Request(\r\n    `${environment}/api/v2/problems?from=now-6h&problemSelector=rootCauseEntity(${rootCauseEntities})`,\r\n    {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n  let data = null;\r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      data = await response.json();\r\n    } else {\r\n      const errorDetails = await response.text();\r\n      this.log(LOG_LEVELS.ERROR, `Problems Data Error: ${response.status} ${errorDetails}`);\r\n    }\r\n  } catch (error) {\r\n    this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(\r\n    environment: string,\r\n    document_type: string,\r\n    document_name_to_query: string,\r\n    headers: Headers\r\n  ): Promise<any> {\r\n\r\n    // Normalize the document_name_to_query by removing spaces and converting to lowercase\r\n    //const normalizedDocumentName = document_name_to_query.replace(/\\s+/g, '').toLowerCase();\r\n\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?admin-access=true&filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n  \r\n    this.log(LOG_LEVELS.DEBUG, \"documentFilter:\\n\" + JSON.stringify(documentFilter, null, 2));\r\n  \r\n    let documents = null;\r\n    try {\r\n      this.log(LOG_LEVELS.DEBUG, \"headers:\\n\" + JSON.stringify(headers, null, 2));\r\n      const response = await fetch(request);\r\n      this.log(LOG_LEVELS.DEBUG, \"response:\\n\" + JSON.stringify(response, null, 2));\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        this.log(LOG_LEVELS.ERROR, `Document List Error: ${response.status} ${errorDetails}`);\r\n      }\r\n    } catch (error) {\r\n      this.log(LOG_LEVELS.ERROR, `${error}`);    \r\n    }\r\n  \r\n    return documents;\r\n  }   \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(\r\n      environment: string,\r\n      documentsList: any,\r\n      headers: Headers\r\n    ): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n    \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n    \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content?admin-access=true`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n    \r\n            // Fetch direct-shares information\r\n            const documentSharesFilter = `documentId=='${documentId}'`;\r\n            const directSharesResponse = await fetch(`${environment}/platform/document/v1/direct-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (directSharesResponse.ok) {\r\n              const directSharesResult = await directSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"directSharesResult:\\n\" + JSON.stringify(directSharesResult, null, 2));\r\n              result[\"direct-shares\"] = directSharesResult[\"direct-shares\"];\r\n            } else {\r\n              const errorDetails = await directSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Direct Shares Error: ${directSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            // Fetch environment-shares information\r\n            const environmentSharesResponse = await fetch(`${environment}/platform/document/v1/environment-shares?filter=${encodeURIComponent(documentSharesFilter)}`, requestOptions);\r\n            if (environmentSharesResponse.ok) {\r\n              const environmentSharesResult = await environmentSharesResponse.json();\r\n              this.log(LOG_LEVELS.DEBUG, \"environmentSharesResult:\\n\" + JSON.stringify(environmentSharesResult, null, 2));\r\n              result[\"environment-shares\"] = environmentSharesResult[\"environment-shares\"];\r\n            } else {\r\n              const errorDetails = await environmentSharesResponse.text();\r\n              this.log(LOG_LEVELS.ERROR, `Environment Shares Error: ${environmentSharesResponse.status} ${errorDetails}`);\r\n            }\r\n    \r\n            if (result.sections) {\r\n              result.sections.forEach((section: any) => {\r\n                if (section.state) {\r\n                  if (section.state.result) {\r\n                    delete section.state.result;\r\n                  }\r\n                  if (section.state.davis && section.state.davis.resultState) {\r\n                    delete section.state.davis.resultState;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n    \r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            this.log(LOG_LEVELS.ERROR, `Document Details Error: ${response.status} ${errorDetails}`);\r\n          }\r\n        } catch (error) {\r\n          this.log(LOG_LEVELS.ERROR, `${error}`);\r\n        }\r\n      }\r\n    \r\n      // Check the size of the resulting JSON\r\n      const jsonString = JSON.stringify(documentDetails);\r\n      const jsonSize = new Blob([jsonString]).size;\r\n      this.log(LOG_LEVELS.DEBUG, \"jsonSize:\" + jsonSize);\r\n      if (jsonSize > this.jsonSizeThreshold) {\r\n        this.log(LOG_LEVELS.DEBUG, \"jsonSize exceed \" + this.jsonSizeThreshold);\r\n        documentDetails = [{ warning: \"The size of the JSON output is too large\" }];\r\n      }\r\n      this.log(LOG_LEVELS.DEBUG, \"documentDetails:\\n\" + JSON.stringify(documentDetails, null, 2));\r\n      return documentDetails;\r\n    }\r\n\r\n    async generateAuditInfo({\r\n      documentList,\r\n      documentDetails,\r\n      entitiesList,\r\n      entitiesData,\r\n      settingsData,\r\n      configList,\r\n      configDetails,\r\n      problemsData,\r\n      classicDashboardList,\r\n      classicDashboardDetails\r\n    }: AuditInfoParams): Promise<any> {\r\n      let audit_info: any = {};\r\n    \r\n      if (documentList != null) {\r\n        audit_info[\"documentList\"] = documentList;\r\n      }\r\n    \r\n      if (documentDetails != null) {\r\n        audit_info[\"documentDetails\"] = documentDetails;\r\n      }\r\n    \r\n      if (entitiesList != null) {\r\n        audit_info[\"entitiesList\"] = entitiesList;\r\n      }\r\n    \r\n      if (entitiesData != null) {\r\n        audit_info[\"entitiesData\"] = entitiesData;\r\n      }\r\n    \r\n      if (configList != null) {\r\n        audit_info[\"configList\"] = configList;\r\n      }\r\n    \r\n      if (configDetails != null && configDetails.error == null) {\r\n        audit_info[\"configDetails\"] = configDetails;\r\n      }\r\n    \r\n      if (settingsData != null) {\r\n        audit_info[\"settingsData\"] = settingsData;\r\n      }\r\n    \r\n      if (problemsData != null) {\r\n        audit_info[\"problemsData\"] = problemsData;\r\n      }\r\n\r\n      if (classicDashboardList != null) {\r\n        audit_info[\"classicDashboardList\"] = classicDashboardList;\r\n      }\r\n\r\n      if (classicDashboardDetails != null) {\r\n        audit_info[\"classicDashboardDetails\"] = classicDashboardDetails;\r\n      }\r\n    \r\n      audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      // Normalize the input by removing spaces and converting to lowercase\r\n      const normalizedInput = inputValue.replace(/\\s+/g, '').toLowerCase();\r\n\r\n      // Normalize the keywords by removing spaces and converting to lowercase\r\n      const normalizedKeywords = keywords.map(keyword => keyword.replace(/\\s+/g, '').toLowerCase());\r\n    \r\n      return normalizedKeywords.every(keyword => normalizedInput.includes(keyword));\r\n    }\r\n\r\n    findIdInObject(object: any): string | null {\r\n      for (const property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n          if (typeof object[property] === \"object\") {\r\n            const id = this.findIdInObject(object[property]);\r\n            if (id) return id;\r\n          } else if (property === 'id' || property === 'entityId') {\r\n            return object[property];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    log(level: LOG_LEVELS, message: string): void {\r\n      if (level <= this.currentLogLevel) {\r\n        console.log(message);\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","LOG_LEVELS","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","array","body","check","reject","_cycle","i","length","_forOf","target","step","next","done","_fixup","TypeError","values","push","DTFunctions","currentLogLevel","ERROR","jsonSizeThreshold","_proto","setLogLevel","level","performGradingPlatform","_ref","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","oauth_header","Promise","resolve","getOauthAccessToken","dt_access_token","Error","getAuthorizationHeaderPlatform","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","documentList","auditInfo","_ref2","finalScore","score","assertionFails","assertion_fails","performGradingGen2","_ref3","dt_gen2_environment","entity_type","entity_name_to_query","config_endpoint","config_name_to_query","config_endpoint_extra_param","settings_schema_id","settings_scope","_this2","getAuthorizationHeaderGen2","auth_header","getEntities","entitiesList","getEntitiesData","entitiesData","getConfigsList","configList","getConfigsData","configDetails","getSettingsData","settingsData","getProblemsData","problemsData","getClassicDashboardList","classicDashboardList","getDashboardsData","classicDashboardDetails","_ref4","_this3","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","redirect","_catch","fetch","response","_temp2","_result2","_exit","json","log","DEBUG","JSON","stringify","access_token","_temp","ok","status","text","errorDetails","error","message","token","environment","_this4","request","Request","entities","_temp4","_temp3","_response$json","_this5","_temp7","entity","entityId","_temp6","_temp5","data","_this6","dashboard_list","user_dashboard_list","_temp8","_this6$getConfigsList","dashboards","filter","dashboard","owner","dashboardList","_this7","dashboardsData","_temp9","_this7$getConfigsData","_temp14","config_list","map","config","_extends","item","name","includes","_this8","parameters","_temp13","_temp11","_temp10","callConfigList","_temp15","_this9","configlist","_temp17","_temp16","_response$json2","_this10","configsData","_temp21","key","keys","_forTo","Array","isArray","subItem","_temp20","request_details","_temp19","response_details","_temp18","configdetails","_forIn","schemaId","scope","_this11","settings_list","generated_scope","_step","_iterator","_createForOfIteratorHelperLoose","_temp23","_temp22","_response$json3","_this12","_step2","rootCauseEntities","_iterator2","substring","_temp25","_temp24","_response$json4","document_type","document_name_to_query","_this13","documentFilter","encodeURIComponent","documents","_temp27","_temp26","_response$json5","_temp35","jsonString","jsonSize","Blob","size","_this14","warning","_temp34","document","documentId","String","_temp33","_temp32","documentSharesFilter","directSharesResponse","_temp31","environmentSharesResponse","_temp29","sections","forEach","section","davis","resultState","_temp28","environmentSharesResult","_temp30","directSharesResult","_ref5","audit_info","checkKeywordsExistence","inputValue","keywords","normalizedInput","replace","toLowerCase","keyword","every","findIdInObject","object","property","hasOwnProperty","console"],"mappings":"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"}