{"version":3,"file":"index.cjs","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","class DTFunctions {\r\n\r\n\r\n   // A boilerplate function to perform a series of operations\r\n   async performOperations(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string,\r\n    dt_platform_environment: string,\r\n    documentType: string,\r\n    documentName: string,\r\n    validationId: string,\r\n    maxScore: number,\r\n    getScore: (auditInfo: any) => Promise<{ score: number, assertion_fails: any[] }>\r\n  ): Promise<{ validationId: string, maxScore: number, finalScore: number, auditInfo: any }> {\r\n    // Get the authorization header\r\n    let oauth_header = null;\r\n    const dt_access_token = await this.getOauthAccessToken(oauth_client_id, oauth_client_secret, dt_account_urn, oauth_sso_endpoint);\r\n    if (!dt_access_token) {\r\n      throw new Error(\"Failed to obtain access token\");\r\n    }\r\n    oauth_header = await this.getAuthorizationHeader(dt_access_token);\r\n\r\n    // Get documents list\r\n    const documentsList = await this.getDocumentsList(dt_platform_environment, documentType, documentName, oauth_header);\r\n\r\n    // Get document details\r\n    const documentDetails = await this.getDocumentDetails(dt_platform_environment, documentsList, oauth_header);\r\n\r\n    // Generate Audit Info\r\n    const auditInfo = await this.generateAuditInfo(documentsList, documentDetails);\r\n\r\n    // Get the score\r\n    const { score: finalScore, assertion_fails: assertionFails } = await getScore(auditInfo);\r\n    auditInfo.assertionFails = assertionFails;\r\n\r\n    return {\r\n      validationId: validationId,\r\n      maxScore: maxScore,\r\n      finalScore: finalScore,\r\n      auditInfo: auditInfo\r\n    };\r\n  }\r\n\r\n  // A utility function to get the OAuth access token\r\n  async getOauthAccessToken(\r\n    oauth_client_id: string,\r\n    oauth_client_secret: string,\r\n    dt_account_urn: string,\r\n    oauth_sso_endpoint: string\r\n  ): Promise<string | undefined> {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    const urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"grant_type\", \"client_credentials\");\r\n    urlencoded.append(\"client_id\", oauth_client_id);\r\n    urlencoded.append(\"client_secret\", oauth_client_secret);\r\n    urlencoded.append(\"scope\", \"document:documents:read document:documents:write document:environment-shares:read document:direct-shares:read \");\r\n    urlencoded.append(\"resource\", dt_account_urn);\r\n\r\n    const requestOptions: RequestInit = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(oauth_sso_endpoint, requestOptions);\r\n      const result = await response.json();\r\n      return result.access_token;\r\n    } catch (error: any) {\r\n      let errorDetails;\r\n      if (error.response) {\r\n        errorDetails = await error.response.text();\r\n        console.error(\"oAuth Access Token Error:\", error.response.status, errorDetails);\r\n      } else {\r\n        console.error(\"oAuth Access Token Error:\", error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  // A utility function to get the authorization header\r\n    async getAuthorizationHeader(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.append(\"Authorization\", \"Bearer \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Entity ID Error:\", response.status, errorDetails);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            console.error(\"Entity Details Error:\", response.status, errorDetails);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n\r\n  // A utility function to get the documents list\r\n  async getDocumentsList(environment: string, document_type: string, document_name_to_query: string, headers: Headers): Promise<any> {\r\n    const documentFilter = `name contains '${document_name_to_query}' and type == '${document_type}'`;\r\n    const request = new Request(`${environment}/platform/document/v1/documents?filter=${encodeURIComponent(documentFilter)}`, {\r\n      method: \"GET\",\r\n      headers: headers,\r\n    });\r\n\r\n    let documents = null;\r\n    try {\r\n      const response = await fetch(request);\r\n      if (response.ok) {\r\n        documents = await response.json();\r\n      } else {\r\n        const errorDetails = await response.text();\r\n        console.error(\"Document List Error:\", response.status, errorDetails);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    return documents;\r\n  }    \r\n\r\n    // A utility function to get the document details\r\n    async getDocumentDetails(environment: string, documentsList: any, headers: Headers): Promise<any[]> {\r\n      if (documentsList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let documentDetails: any[] = [];\r\n      const requestOptions: RequestInit = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n  \r\n      for (const document of documentsList.documents) {\r\n        const documentId = String(document.id);\r\n        try {\r\n          const response = await fetch(`${environment}/platform/document/v1/documents/${documentId}/content`, requestOptions);\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            documentDetails.push(result);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            console.error(\"Document Details Error:\", response.status, errorDetails);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n  \r\n      return documentDetails;\r\n    }\r\n\r\n   // A utility function to generate audit info\r\n  async generateAuditInfo(documentList: any, documentDetails: any): Promise<any> {\r\n    let audit_info: any = {};\r\n\r\n    if (documentList != null) {\r\n      audit_info[\"documentList\"] = documentList;\r\n    }\r\n\r\n    if (documentDetails != null) {\r\n      audit_info[\"documentDetails\"] = documentDetails;\r\n    }\r\n\r\n    audit_info.assertionFails = [];\r\n\r\n    return audit_info;\r\n  }   \r\n\r\n\r\n    checkKeywordsExistence(inputValue: string, keywords: string[]): boolean {\r\n      return keywords.every(keyword => inputValue.toLowerCase().includes(keyword.toLowerCase()));\r\n    }\r\n\r\n}\r\n\r\n  export default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","DTFunctions","_proto","performOperations","oauth_client_id","oauth_client_secret","dt_account_urn","oauth_sso_endpoint","dt_platform_environment","documentType","documentName","validationId","maxScore","getScore","_this","this","oauth_header","Promise","resolve","getOauthAccessToken","then","dt_access_token","Error","getAuthorizationHeader","_this$getAuthorizatio","getDocumentsList","documentsList","getDocumentDetails","documentDetails","generateAuditInfo","auditInfo","_ref","finalScore","score","assertionFails","assertion_fails","e","reject","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","_catch","fetch","response","json","result","access_token","error","_temp","text","_error$response$text","console","status","message","token","getEntities","environment","entity_type","entity_name_to_query","request","Request","entities","_temp3","_temp2","ok","_response$json","errorDetails","getEntitiesData","entitiesList","entitiesData","_temp6","_forOf","entity","entityId","_temp5","_temp4","data","push","document_type","document_name_to_query","encodeURIComponent","documents","_temp8","_temp7","_response$json2","_temp11","document","documentId","String","_temp10","_temp9","documentList","audit_info","checkKeywordsExistence","inputValue","keywords","every","keyword","toLowerCase","includes","Symbol","iterator","_settle","pact","state","value","s","_Pact","o","v","bind","observer","onFulfilled","onRejected","callback","_isSettledPact","thenable","target","check","_iteratorSymbol","step","_cycle","next","done","array","i"],"mappings":"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"}