{"version":3,"file":"index.cjs","sources":["../src/helpers/QuestionSDK.ts","../src/helpers/DTFunctions.ts"],"sourcesContent":["import { Question } from \"../types/Question\";\r\n\r\nclass QuestionSDK {\r\n  constructor() {}\r\n\r\n  createQuestion(id: string, question: string) {\r\n    let obj = {\r\n      id: id,\r\n      description: question,\r\n    } as Question;\r\n    return obj;\r\n  }\r\n}\r\nexport default QuestionSDK;\r\n","class DTFunctions {\r\n    // A utility function to get the authorization header\r\n    async getAuthorizationHeader(token: string): Promise<Headers> {\r\n      // Create the headers object\r\n      const headers = new Headers();\r\n      // Add the authorization header\r\n      headers.set(\"Authorization\", \"Api-Token \" + token);\r\n      return headers;\r\n    }\r\n  \r\n    // A utility function to get the entities list\r\n    async getEntities(environment: string, entity_type: string, entity_name_to_query: string, headers: Headers): Promise<any> {\r\n      // Get the application with the specified name\r\n      const entitySelector = `type(${entity_type}),entityName.contains(${entity_name_to_query})`;\r\n      // Create the request object\r\n      const request = new Request(`${environment}/api/v2/entities?entitySelector=${entitySelector}`, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n  \r\n      let entities = null;\r\n      try {\r\n        const response = await fetch(request);\r\n        if (response.ok) {\r\n          entities = await response.json();\r\n        } else {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Entity ID Error:\", response.status, errorDetails);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n  \r\n      return entities;\r\n    }\r\n  \r\n    // A utility function to get the entities data\r\n    async getEntitiesData(environment: string, entitiesList: any, headers: Headers): Promise<any[]> {\r\n      if (entitiesList === null) {\r\n        return [];\r\n      }\r\n  \r\n      let entitiesData: any[] = [];\r\n      for (const entity of entitiesList.entities) {\r\n        const entityId = entity.entityId;\r\n        const request = new Request(`${environment}/api/v2/entities/${entityId}`, {\r\n          method: \"GET\",\r\n          headers: headers,\r\n        });\r\n  \r\n        try {\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            entitiesData.push(data);\r\n          } else {\r\n            const errorDetails = await response.text();\r\n            console.error(\"Entity Details Error:\", response.status, errorDetails);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n  \r\n      return entitiesData;\r\n    }\r\n  }\r\n  \r\n  export default DTFunctions;"],"names":["QuestionSDK","prototype","createQuestion","id","question","description","DTFunctions","_proto","getAuthorizationHeader","token","headers","Headers","set","Promise","resolve","e","reject","getEntities","environment","entity_type","entity_name_to_query","request","Request","method","entities","_temp2","_catch","fetch","then","response","_temp","ok","json","_response$json","text","errorDetails","console","error","status","getEntitiesData","entitiesList","entitiesData","_temp5","_forOf","entity","entityId","_temp4","_temp3","data","push","pact","state","value","s","_Pact","o","_settle","bind","v","observer","onFulfilled","onRejected","result","this","callback","_this"],"mappings":"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"}